#!/usr/bin/env python3

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#
# Tests for colorMaptoTXT.py
#

import sys
import unittest
import xmlrunner
from optparse import OptionParser
import subprocess
import os

COLORMAP_2_TXT_PATH = "/usr/bin/colorMaptoTXT.py"

class TestColormapTXT(unittest.TestCase):

    @classmethod
    def setUpClass(self):
        self.testdata_path = os.path.join(os.getcwd(), 'colormap_txt_test_data/')
        self.expected_outputs_path = os.path.join(self.testdata_path, "expected_outputs")
    
    # Tests converting a colormap to text using colorMaptoTXT.py, converting % units to decimal using the scale argument
    def test_colorMaptoTXT_scale(self):
        layer_name = "GHRSST_Sea_Ice_Concentration"
        cmd = [
            "python3",
            COLORMAP_2_TXT_PATH,
            "-c",
            os.path.join(self.testdata_path, f"{layer_name}.xml"),
            "--scale",
            "0.01"
        ]
        process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        txt_output, err = process.communicate()
        if err.decode('utf-8') != "":
            self.fail("ERROR in {0}:\n{1}".format(COLORMAP_2_TXT_PATH, err.decode("utf-8")))
        else:
            with open(os.path.join(self.expected_outputs_path, f"{layer_name}_expected.txt")) as expected_fp:
                expected_txt = expected_fp.read()
            fail_str = ("Text generated by {0} does not match expected.\n" +
                        "The following text was generated instead:\n{1}").format(COLORMAP_2_TXT_PATH,
                                                                                 txt_output.decode("utf-8"))
            self.assertTrue(expected_txt.strip() == txt_output.decode("utf-8").strip(), fail_str)
    
    # Tests converting a colormap to text using colorMaptoTXT.py, leaving temperature units as is
    def test_colorMaptoTXT_temperature(self):
        layer_name = "GHRSST_Sea_Surface_Temperature_Anomalies"
        cmd = [
            "python3",
            COLORMAP_2_TXT_PATH,
            "-c",
            os.path.join(self.testdata_path, f"{layer_name}.xml")
        ]
        process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        txt_output, err = process.communicate()
        if err.decode('utf-8') != "":
            self.fail("ERROR in {0}:\n{1}".format(COLORMAP_2_TXT_PATH, err.decode("utf-8")))
        else:
            with open(os.path.join(self.expected_outputs_path, f"{layer_name}_expected.txt")) as expected_fp:
                expected_txt = expected_fp.read()
            fail_str = ("Text generated by {0} does not match expected.\n" +
                        "The following text was generated instead:\n{1}").format(COLORMAP_2_TXT_PATH,
                                                                                 txt_output.decode("utf-8"))
            self.assertTrue(expected_txt.strip() == txt_output.decode("utf-8").strip(), fail_str)
    
    # Tests converting a colormap to text using colorMaptoTXT.py, converting C to K using the offset argument
    def test_colorMaptoTXT_offset(self):
        layer_name = "GHRSST_Sea_Surface_Temperature"
        cmd = [
            "python3",
            COLORMAP_2_TXT_PATH,
            "-c",
            os.path.join(self.testdata_path, f"{layer_name}.xml"),
            "--offset",
            "273.15"
        ]
        process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        txt_output, err = process.communicate()
        if err.decode('utf-8') != "":
            self.fail("ERROR in {0}:\n{1}".format(COLORMAP_2_TXT_PATH, err.decode("utf-8")))
        else:
            with open(os.path.join(self.expected_outputs_path, f"{layer_name}_expected.txt")) as expected_fp:
                expected_txt = expected_fp.read()
            fail_str = ("Text generated by {0} does not match expected.\n" +
                        "The following text was generated instead:\n{1}").format(COLORMAP_2_TXT_PATH,
                                                                                 txt_output.decode("utf-8"))
            self.assertTrue(expected_txt.strip() == txt_output.decode("utf-8").strip(), fail_str)
    
    # Tests converting a colormap to text and storing the output as a text file
    def test_colorMaptoTXT_txtfile(self):
        layer_name = "MEaSUREs_Sea_Surface_Height_Anomalies"
        cmd = [
            "python3",
            COLORMAP_2_TXT_PATH,
            "-c",
            os.path.join(self.testdata_path, f"{layer_name}.xml"),
            "-o",
            f"test_{layer_name}_expected.txt"
        ]
        process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        _, err = process.communicate()
        if err.decode('utf-8') != "":
            self.fail("ERROR in {0}:\n{1}".format(COLORMAP_2_TXT_PATH, err.decode("utf-8")))
        else:
            with open(f"test_{layer_name}_expected.txt") as test_fp:
                txt_output = test_fp.read()
            with open(os.path.join(self.expected_outputs_path, f"{layer_name}_expected.txt")) as expected_fp:
                expected_txt = expected_fp.read()
            fail_str = ("Text generated by {0} does not match expected.\n" +
                        "The following text was generated instead:\n{1}").format(COLORMAP_2_TXT_PATH,
                                                                                 txt_output)
            self.assertTrue(expected_txt.strip() == txt_output.strip(), fail_str)

if __name__ == '__main__':
    # Parse options before running tests
    parser = OptionParser()
    parser.add_option(
        '-o',
        '--output',
        action='store',
        type='string',
        dest='outfile',
        default='test_colormap_txt.xml',
        help='Specify XML output file (default is test_colormap_html_sld_results.xml')
    parser.add_option(
        '-s',
        '--start_server',
        action='store_true',
        dest='start_server',
        help='Load test configuration into Apache and quit (for debugging)')
    (options, args) = parser.parse_args()

    # --start_server option runs the test Apache setup, then quits.
    if options.start_server:
        TestColormapTXT.setUpClass()
        sys.exit(
            'Apache has been loaded with the test configuration. No tests run.'
        )

    # Have to delete the arguments as they confuse unittest
    del sys.argv[1:]

    with open(options.outfile, 'wb') as f:
        print('\nStoring test results in "{0}"'.format(options.outfile))
        unittest.main(testRunner=xmlrunner.XMLTestRunner(output=f))
